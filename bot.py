import asyncio
from datetime import datetime, timedelta
from telethon import TelegramClient, events

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
api_id = 27481215
api_hash = '75f495f542a5beb8ba632b70fc7ebf79'
bot_token = '7639845168:AAG770ffbEQRP4W-Qk2jcnoG5x--SjyuzA0'
notify_user = '@Mytracksignal'

# ID –≤—Å–µ—Ö –ø–∞–ø–æ–∫ (—á–∞—Ç–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è:
chat_ids = [
    -1002048172508, -1002058755890, -1002146109187,
    -1001891589065, -1001974198702, -1001840337788,
    -1002011050670, -1002084209596, -1002094849653,
    -1002193485779, -1002202792246, -1002215306818,
    -1002438264294, -1002400892367, -1002420417890
]

dogon_words = ['–¥–æ–≥–æ–Ω', '–¥–æ–≥–æ–Ω—É', '–¥–æ–≥–æ–Ω–æ–º', '–¥–æ–≥–æ–Ω–µ', '–¥–æ–≥–æ–Ω–æ–≤']

client = TelegramClient('anon', api_id, api_hash).start(bot_token=bot_token)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
signal_state = {chat_id: {'ready': False, 'is_clean': True} for chat_id in chat_ids}
plus_streaks = {chat_id: [] for chat_id in chat_ids}
daily_stats = {chat_id: 0 for chat_id in chat_ids}

@client.on(events.NewMessage(chats=chat_ids))
async def handler(event):
    message = event.message.message.lower()
    chat_id = event.chat_id
    chat_title = (await event.get_chat()).title

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "–≥–æ—Ç–æ–≤–∏–º"
    if '–≥–æ—Ç–æ–≤–∏–º' in message:
        signal_state[chat_id] = {'ready': True, 'is_clean': True}
        return

    # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–≥–æ–Ω ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–∏—Å—Ç–æ—Ç—É
    if any(word in message for word in dogon_words):
        signal_state[chat_id]['is_clean'] = False
        plus_streaks[chat_id] = []
        return

    # –ï—Å–ª–∏ —á–∏—Å—Ç—ã–π —Å–∏–≥–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç "–ø–ª—é—Å"
    if signal_state[chat_id]['ready'] and signal_state[chat_id]['is_clean']:
        if '–ø–ª—é—Å' in message:
            plus_streaks[chat_id].append(datetime.now())
            if len(plus_streaks[chat_id]) > 3:
                plus_streaks[chat_id].pop(0)

            if len(plus_streaks[chat_id]) == 3:
                await client.send_message(chat_id,
                    f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 3 —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–¥—Ä—è–¥ –≤ –ø–ª—é—Å–µ!\nüìÇ –ü–∞–ø–∫–∞: {chat_title}\nüîî {notify_user}"
                )
                daily_stats[chat_id] += 1
                plus_streaks[chat_id] = []
                signal_state[chat_id] = {'ready': False, 'is_clean': True}

# –°–æ–æ–±—â–µ–Ω–∏–µ ‚Äú–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω‚Äù –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def status_notifier():
    while True:
        now = datetime.now().strftime('%H:%M:%S')
        for chat_id in chat_ids:
            await client.send_message(chat_id, f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã... ({now})")
        await asyncio.sleep(300)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ 23:59
async def daily_summary():
    while True:
        now = datetime.now()
        target = datetime.combine(now.date(), datetime.strptime("23:59", "%H:%M").time())
        if now > target:
            target += timedelta(days=1)
        await asyncio.sleep((target - now).seconds)
        for chat_id in chat_ids:
            if daily_stats[chat_id] > 0:
                await client.send_message(chat_id,
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏:\n‚úÖ 3 –ø–ª—é—Å–∞ –ø–æ–¥—Ä—è–¥: {daily_stats[chat_id]} —Ä–∞–∑(–∞)"
                )
            daily_stats[chat_id] = 0  # –°–±—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å

# –ó–∞–ø—É—Å–∫
async def main():
    await asyncio.gather(
        status_notifier(),
        daily_summary()
    )

client.loop.run_until_complete(main())
