import asyncio
from datetime import datetime, timedelta
from telethon import TelegramClient, events
import re

api_id = 27481215  # ‚Üê –í—Å—Ç–∞–≤—å —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π API ID
api_hash = '75f495f542a5beb8ba632b70fc7ebf79'  # ‚Üê –∏ API Hash
bot_token = '7639845168:AAG770ffbEQRP4W-Qk2jcnoG5x--SjyuzA0'
user_tag = '@Mytracksignal'

# –ù–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ ID
group_names = {
    -1002048172508: "üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫üí∞1–ú‚åõÔ∏è",
    -1002058755890: "üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫üí∞2–ú‚åõÔ∏è",
    -1002146109187: "üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫üí∞3–ú‚åõÔ∏è",
    -1001891589065: "üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ OTCüí∞1–ú‚åõÔ∏è",
    -1001974198702: "üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ OTCüí∞2–ú‚åõÔ∏è",
    -1001840337788: "üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ OTCüí∞3–ú‚åõÔ∏è",
    -1002011050670: "üí∞–ê–∫—Ü–∏–∏ –û–¢–°üí∞1–ú‚åõÔ∏è",
    -1002084209596: "üí∞–ê–∫—Ü–∏–∏ –û–¢–°üí∞2–ú‚åõÔ∏è",
    -1002094849653: "üí∞–ê–∫—Ü–∏–∏ –û–¢–°üí∞3–ú‚åõÔ∏è",
    -1002193485779: "üí∞–ö–†–ò–ü–¢–ê –û–¢–°üí∞1–ú‚åõÔ∏è",
    -1002202792246: "üí∞–ö–†–ò–ü–¢–ê –û–¢–°üí∞2–ú‚åõÔ∏è",
    -1002215306818: "üí∞–ö–†–ò–ü–¢–ê –û–¢–°üí∞3–ú‚åõÔ∏è",
    -1002438264294: "üõ¢ –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã üõ¢ –û–¢–° 1–ú",
    -1002400892367: "üõ¢ –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã üõ¢ –û–¢–° 2–ú",
    -1002420417890: "üõ¢ –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã üõ¢ –û–¢–° 3–ú"
}

client = TelegramClient('anon_session', api_id, api_hash).start(bot_token=bot_token)

plus_counter = {chat_id: 0 for chat_id in group_names}
triple_plus_log = {chat_id: 0 for chat_id in group_names}

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ "–¥–æ–≥–æ–Ω"
dogon_variants = ['–¥–æ–≥–æ–Ω', '–¥–æ–≥–æ–Ω—É', '–¥–æ–≥–æ–Ω–æ–º', '–¥–æ–≥–æ–Ω–æ–≤', '–∫–æ –≤—Ç–æ—Ä–æ–º—É –¥–æ–≥–æ–Ω—É', '–≤—Ç–æ—Ä–æ–π –¥–æ–≥–æ–Ω']

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —á–∏—Å—Ç—ã–π —Å–∏–≥–Ω–∞–ª
def is_clean_signal(text):
    text = text.lower()
    if '–ø–ª—é—Å' not in text:
        return False
    if any(d in text for d in dogon_variants):
        return False
    return True

@client.on(events.NewMessage(chats=list(group_names)))
async def handler(event):
    chat_id = event.chat_id
    message = event.raw_text.lower()

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ "–≥–æ—Ç–æ–≤–∏–º" –∏ "–¥–æ–≥–æ–Ω" ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if '–≥–æ—Ç–æ–≤–∏–º' in message and any(d in message for d in dogon_variants):
        return

    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å—Ç—ã–π –ø–ª—é—Å
    if is_clean_signal(message):
        plus_counter[chat_id] += 1
        if plus_counter[chat_id] == 3:
            triple_plus_log[chat_id] += 1
            plus_counter[chat_id] = 0
            group = group_names.get(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
            await client.send_message(chat_id, f"üî• {user_tag}, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ 3 –ø–ª—é—Å–∞ –ø–æ–¥—Ä—è–¥ –≤ –≥—Ä—É–ø–ø–µ: {group}")
    elif '–ø–ª—é—Å' not in message:
        plus_counter[chat_id] = 0

# –°–æ–æ–±—â–µ–Ω–∏–µ "–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω" –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def notify_alive():
    while True:
        now = datetime.now()
        for chat_id in group_names:
            try:
                await client.send_message(chat_id, "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã...")
            except Exception:
                continue
        await asyncio.sleep(300)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def send_daily_stats():
    while True:
        now = datetime.now()
        target = now.replace(hour=23, minute=59, second=0, microsecond=0)
        if now > target:
            target += timedelta(days=1)
        await asyncio.sleep((target - now).total_seconds())

        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n"
        for chat_id, count in triple_plus_log.items():
            name = group_names.get(chat_id, str(chat_id))
            text += f"{name} ‚Äî {count} —Å–∏—Ç—É–∞—Ü–∏–π\n"
            triple_plus_log[chat_id] = 0  # —Å–±—Ä–æ—Å
        for chat_id in group_names:
            try:
                await client.send_message(chat_id, text)
            except Exception:
                continue

async def main():
    await asyncio.gather(notify_alive(), send_daily_stats())

client.loop.create_task(main())
client.run_until_disconnected()
