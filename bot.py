import asyncio
from telethon import TelegramClient, events
from datetime import datetime, time, timedelta

# –î–ê–ù–ù–´–ï
api_id = 27481215
api_hash = '75f495f542a5beb8ba632b70fc7ebf79'
bot_token = '7639845168:AAG770ffbEQRP4W-Qk2jcnoG5x--SjyuzA0'
user_nickname = '@Mytracksignal'

# ID –≤—Å–µ—Ö —á–∞—Ç–æ–≤
chat_ids = {
    -1002048172508: 'üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫üí∞1–ú‚åõÔ∏è',
    -1002058755890: 'üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫üí∞2–ú‚åõÔ∏è',
    -1002146109187: 'üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫üí∞3–ú‚åõÔ∏è',
    -1001891589065: 'üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ OTCüí∞1–ú‚åõÔ∏è',
    -1001974198702: 'üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ OTCüí∞2–ú‚åõÔ∏è',
    -1001840337788: 'üí∞–í–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ OTCüí∞3–ú‚åõÔ∏è',
    -1002011050670: 'üí∞–ê–∫—Ü–∏–∏ –û–¢–°üí∞1–ú‚åõÔ∏è',
    -1002084209596: 'üí∞–ê–∫—Ü–∏–∏ –û–¢–°üí∞2–ú‚åõÔ∏è',
    -1002094849653: 'üí∞–ê–∫—Ü–∏–∏ –û–¢–°üí∞3–ú‚åõÔ∏è',
    -1002193485779: 'üí∞–ö–†–ò–ü–¢–ê –û–¢–°üí∞1–ú‚åõÔ∏è',
    -1002202792246: 'üí∞–ö–†–ò–ü–¢–ê –û–¢–°üí∞2–ú‚åõÔ∏è',
    -1002215306818: 'üí∞–ö–†–ò–ü–¢–ê –û–¢–°üí∞3–ú‚åõÔ∏è',
    -1002438264294: 'üõ¢ –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã üõ¢ –û–¢–° 1–ú',
    -1002400892367: 'üõ¢ –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã üõ¢ –û–¢–° 2–ú',
    -1002420417890: 'üõ¢ –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã üõ¢ –û–¢–° 3–ú',
}

# –°–õ–û–í–ê-–î–û–ì–û–ù–´
dogon_words = ['–¥–æ–≥–æ–Ω', '–¥–æ–≥–æ–Ω–∞', '–¥–æ–≥–æ–Ω—É', '–¥–æ–≥–æ–Ω–æ–º', '–≥–æ—Ç–æ–≤–∏–º—Å—è', '–≥–æ—Ç–æ–≤–∏–º—Å—è –∫–æ']

# –°—á–µ—Ç—á–∏–∫–∏
signal_counts = {chat_id: [] for chat_id in chat_ids}
triple_successes = []

# –ö–ª–∏–µ–Ω—Ç
client = TelegramClient('anon', api_id, api_hash).start(bot_token=bot_token)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def is_valid_signal(text):
    lowered = text.lower()
    return (
        '–≥–æ—Ç–æ–≤–∏–º' in lowered
        and not any(word in lowered for word in dogon_words)
    )

def is_positive_signal(text):
    return '–ø–ª—é—Å' in text.lower()

@client.on(events.NewMessage(chats=list(chat_ids.keys())))
async def handler(event):
    chat_id = event.chat_id
    message = event.message.message

    if is_valid_signal(message):
        signal_counts[chat_id] = []
    elif is_positive_signal(message):
        signal_counts[chat_id].append(datetime.now())
        if len(signal_counts[chat_id]) >= 3:
            name = chat_ids.get(chat_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            triple_successes.append((chat_id, datetime.now()))
            await client.send_message(
                chat_id,
                f'{user_nickname} üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 3 –ø–ª—é—Å–∞ –ø–æ–¥—Ä—è–¥ –≤ –ø–∞–ø–∫–µ: {name}'
            )
            signal_counts[chat_id] = []

# –°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def periodic_message():
    while True:
        for chat_id in chat_ids:
            try:
                await client.send_message(chat_id, "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã...")
            except:
                pass
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ 23:59
async def send_daily_report():
    while True:
        now = datetime.now()
        target = datetime.combine(now.date(), time(23, 59))
        if now > target:
            target += timedelta(days=1)
        await asyncio.sleep((target - now).total_seconds())

        count = len(triple_successes)
        for chat_id in chat_ids:
            try:
                await client.send_message(
                    chat_id,
                    f"üìä –ó–∞ —Å—É—Ç–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} —Å–∏—Ç—É–∞—Ü–∏–π —Å 3+ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –ø–æ–¥—Ä—è–¥."
                )
            except:
                pass
        triple_successes.clear()

async def main():
    await asyncio.gather(
        periodic_message(),
        send_daily_report()
    )

client.loop.create_task(main())
client.run_until_disconnected()
